//
//  Natalie.swift
//  IBGenerateKit
//
//  Created by phimage on 25/08/2019.
//

import Foundation
import IBDecodable

struct Natalie {
    
    struct Header: CustomStringConvertible {
        var description: String {
            var output = String()
            output += "//\n"
            output += "// Autogenerated by ibgenerate - Storyboard Generator\n"
            output += "//\n"
            return output
        }
    }
    
    let storyboards: [StoryboardFile]
    let header = Header()
    
    var storyboardCustomModules: Set<String> {
        return Set(storyboards.lazy.flatMap { $0.document.customModules })
    }
    
    init(storyboards: [StoryboardFile]) {
        self.storyboards = storyboards
        assert(Set(storyboards.map { $0.document.targetRuntime.os }).count < 2)
    }
    
    static func process(storyboards: [StoryboardFile]) -> String {
        var output = String()
        for os in OS.allValues {
            let storyboardsForOS = storyboards.filter { $0.document.targetRuntime.os == os }
            if !storyboardsForOS.isEmpty {
                
                if storyboardsForOS.count != storyboards.count {
                    output += "#if os(\(os.rawValue))\n"
                }
                
                output += Natalie(storyboards: storyboardsForOS).process(os: os)
                
                if storyboardsForOS.count != storyboards.count {
                    output += "#endif\n"
                }
            }
        }
        return output
    }
    
    func process(os: OS) -> String {
        var output = ""
        
        output += header.description
        output += "import \(os.framework)\n"
        output += "import IBStoryboard\n"
        for module in storyboardCustomModules {
            output += "import \(module)\n"
        }
        output += "\n"
        output += "// MARK: - Storyboards\n"

        output += "struct Storyboards {\n"
        for file in storyboards {
            output += file.document.processStoryboard(storyboardName: file.storyboardName, os: os)
        }
        output += "}\n"
        output += "\n"
        
        let colors = storyboards
            .flatMap { $0.document.colors }
            .filter {
                switch $0 {
                case .systemColor:
                    return false
                default:
                    return true
                }
            }
            .compactMap { $0.assetName }
        if !colors.isEmpty {
            output += "// MARK: - Colors\n"
            output += "@available(\(os.colorOS), *)\n"
            output += "extension \(os.colorType) {\n"
            for colorName in Set(colors) {
                output += "    static let \(swiftRepresentation(for: colorName, firstLetter: .none)) = \(os.colorType)(named: \(initIdentifier(for: os.colorNameType, value: colorName)))\n"
            }
            output += "}\n"
            output += "\n"
        }

        let storyboardModules = storyboardCustomModules
        for file in storyboards {
            output += file.document.processViewControllers(storyboardCustomModules: storyboardModules)
        }
        
        return output
    }
}
